}
MissingGap.Controller.FindAllMissingGap <- function(dataType, startDateTime, endDateTime) {
resultAllStation <- data.frame(stationCode = c(),
startDateTime = c(),
endDateTime = c())
stations <- DataLog.GetStationCodeList()
for (station in stations) {
result <- MissingGap.Controller.FindMissingGap(station, dataType, startDateTime, endDateTime)
if(is.data.frame(result)) {
if(nrow(result) > 0) {
result$stationCode <- station
resultAllStation <-rbind(resultAllStation, result)
}
}
}
if (nrow(resultAllStation) == 0) {
return(NULL)
}
return(resultAllStation)
}
MissingGap.Controller.Batch <- function (dataType, startDateTime, endDateTime, addToDB = TRUE) {
problemType <- "MG"
missingGap <- MissingGap.Controller.FindAllMissingGap(dataType, startDateTime, endDateTime)
if (addToDB) {
# update problem
print("Adding Problems")
# str(outOfRange)
Problems.AddProblems(missingGap, dataType, problemType)
}
return(missingGap)
}
MissingGap.Controller.DailyOperation <- function(dataType,
interval = NULL) {
currentTime <- Sys.time()
problemType <- "MG"
# set default interval
if (is.null(interval)) {
if (Config.MissingGap.defaultInterval > 60*60) {
interval <- Config.MissingGap.defaultInterval + (3 * Config.defaultDataInterval)
} else {
interval <- 60 * 60 + (3 * Config.defaultDataInterval)
}
}
startTime = currentTime - interval
alreadySentStationCode <- Problems.GetLatestProblemStationCodeList(dataType, problemType, currentTime)
missingGap <- MissingGap.Controller.Batch(dataType, startDateTime, currentTime)
# update problem
problemsStationCode <- unique(missingGap$stationCode)
newStation <- setdiff(problemsStationCode, alreadySentStationCode)
Problems.SendNewProblemNotification(newStation, dataType, problemType, currentTime)
# send email
return(missingGap)
}
MissingGap.Controller.Batch("WATER", as.POSIXct("2014-01-01"), as.POSIXct("2014-11-01"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "BD", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
emailResult <- POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
emailResult <- POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
emailResult <- POST(Config.Email.fullURL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
# emailResult <- POST(Config.Email.fullURL, body = json, encode = "json")
emailResult <- POST(Config.Email.fullURL, body = list(x = json, content_type = content_type_json()))
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
list(x = list(x = c(1,2,3)))
list(1,2,3,4,5)
?unbox
z = list(1,2,3)
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
rain <- list(name = c(), stations = c())
water <- list(name = c(), stations = c())
# rain <- list(name = problemName, stations = problemStation)
content <- list(key = key,
num = length(problemStation),
date = Helper.POSIXctToString(dateTime),
rain = rain,
water = water)
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
# emailResult <- POST(Config.Email.fullURL, body = json, encode = "json")
emailResult <- POST(Config.Email.fullURL, body = list(x = content, content_type = content_type_json()))
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
rain <- list(name = c(), stations = c())
water <- list(name = c(), stations = c())
# rain <- list(name = problemName, stations = problemStation)
content <- list(key = key,
num = length(problemStation),
date = Helper.POSIXctToString(dateTime),
rain = rain,
water = water)
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
# emailResult <- POST(Config.Email.fullURL, body = json, encode = "json")
emailResult <- POST(Config.Email.fullURL, body = content, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
library("httr")
library("jsonlite")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
json <- as.character(toJSON(body))
rain <- list(name = c(), stations = c())
water <- list(name = c(), stations = c())
# rain <- list(name = problemName, stations = problemStation)
content <- list(key = key,
num = length(problemStation),
date = Helper.POSIXctToString(dateTime),
rain = rain,
water = water)
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
content_type_json()
# emailResult <- POST(Config.Email.fullURL, body = json, encode = "json")
emailResult <- POST(Config.Email.fullURL, body = body, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", json , "\n")
return(emailResult)
}
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
Email.sendMailNotification("WATER", "OR", Sys.time(), c("A", "B", "C"))
