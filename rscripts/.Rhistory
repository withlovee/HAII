# }
if (dataType == "WATER") {
fields <- c(fields, "data_log.water1")
} else if(dataType == "RAIN") {
fields <- c(fields, "data_log.rain1h")
}
# concat fields together, seperate with ","
fieldsString <- paste0(fields, collapse=", ")
# generate query string
#INNER JOIN tele_wl_detail ON tele_wl_detail.code = data_log.code
queryString <- paste0(
"SELECT ", fieldsString,"
FROM data_log
WHERE
(data_log.date > DATE '", startDateString ,"'
OR
data_log.date = DATE '", startDateString ,"' AND data_log.time >= TIME '", startTimeString ,"')
AND
(data_log.date < DATE '", endDateString ,"'
OR
data_log.date = DATE '", endDateString ,"' AND data_log.time <= TIME '", endTimeString ,"')
AND data_log.code = '", stationCode ,"'
")
# query from database
dbConnection <- DBConnection.OpenDBConnection(verbose=verbose)
data <- dbGetQuery(dbConnection, queryString)
DBConnection.CloseDBConnection(dbConnection, verbose=verbose)
# if there is no data, return null
if (nrow(data) == 0) {
return(NULL)
}
# add datetime fields
data$datetime = as.POSIXct(paste(data$date, data$time))
# add value fields
if (dataType == "WATER") {
data$value = data$water1
} else if (dataType == "RAIN") {
data$value = data$rain1h
}
# for rain data, use only 1 hr data
if (dataType == "RAIN") {
data <- data[as.numeric(strftime(data$datetime,"%M")) == 0,]
if (nrow(data) == 0) {
return(NULL)
}
}
# order by datetime
data <- data[order(data$datetime),]
return(data)
}
DataLog.UpdateValue <- function(stationCode, dataType, startDateTime, endDateTime, value) {
startDateString <- strftime(startDateTime, "%Y-%m-%d")
endDateString   <- strftime(endDateTime, "%Y-%m-%d")
startTimeString <- strftime(startDateTime, "%H:%M:%S")
endTimeString   <- strftime(endDateTime, "%H:%M:%S")
field <- ""
if (dataType == "WATER") {
field <- "water1"
} else if (dataType == "RAIN") {
field <- "rain1h"
}
queryString <- paste0(
"UPDATE data_log
SET ", field ," = ", value ,"
WHERE
(data_log.date > DATE '", startDateString ,"'
OR
data_log.date = DATE '", startDateString ,"' AND data_log.time >= TIME '", startTimeString ,"')
AND
(data_log.date < DATE '", endDateString ,"'
OR
data_log.date = DATE '", endDateString ,"' AND data_log.time <= TIME '", endTimeString ,"')
AND data_log.code = '", stationCode ,"'
")
print(queryString)
DBConnection.SendQuery(queryString)
}
DataLog.GetWaterStationRiverLevel <- function (stationCode) {
queryString <- paste0("
SELECT code, left_bank, right_bank, ground_level
FROM tele_wl_detail
WHERE code = '", stationCode ,"'
")
result <- DBConnection.Query(queryString)
return(result)
}
DataLog.GetInstallationDate <- function (stationCode) {
queryString <- paste0("
SELECT insdate
FROM tele_station
WHERE code = '", stationCode ,"'
")
result <- DBConnection.Query(queryString)
if (nrow(result) > 0) {
date <- result[1,]
if (is.na(date)) {
return(NULL)
}
return(as.POSIXct(strftime(date)))
}
return(NULL)
}
DataLog.GetStationCodeList <- function (dataType, verbose = FALSE) {
# Get list of code of all telemetering station.
#
# Returns:
#   Vector of string (all telemetering station's code).
#verbose
if (verbose) {
cat("Getting station list\n")
}
queryString <- ""
if(dataType == "WATER") {
queryString <- "SELECT tele_wl_detail.code FROM tele_wl_detail"
} else if(dataType == "RAIN") {
queryString <- "SELECT tele_station.code FROM tele_station"
}
dbConnection <- DBConnection.OpenDBConnection(verbose=verbose)
data <- dbGetQuery(dbConnection, queryString)
DBConnection.CloseDBConnection(dbConnection, verbose=verbose)
return(data$code)
}
Problems.AddProblem('PIN001', 'WATER', 'OR', as.POSIXct('2014-06-12 12:30:00'), as.POSIXct('2014-06-12 13:50:00'))
library("httr")
library("jsonlite")
library("lubridate")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation, mailType="instantly",
sendEmail=TRUE, returnJson=FALSE, key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
# json <- as.character(toJSON(body))
url <- ""
if(mailType == "instantly") {
url <- Config.Email.Instantly.fullURL
} else if(mailType == "daily") {
url <- Config.Email.Daily.fullURL
} else if(mailType == "monthly") {
url <- Config.Email.Monthly.fullURL
}
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.FindOverlapProblemJSON <- function(dataType, problemType, startDateTime, endDateTime) {
res <- list(name = unbox(problemType),
stations = Problems.GetProblemStationCodeListOverlapInterval(
dataType, problemType ,datetime$start, datetime$end)
)
return(res)
}
Email.SendDailyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastOperationDay(currentTime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv)
rain <- list(rain_or, rain_mg, rain_fv)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Daily.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendMonthlyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastMonth(currentTime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv, water_ol, water_hm, water_mp)
rain <- list(rain_or, rain_mg, rain_fv, rain_mp)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Monthly.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendEmail <- function(body, url, sendEmail = TRUE, returnJson = FALSE) {
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(toJSON(body))
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.SendDailyReport()
library("httr")
library("jsonlite")
library("lubridate")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation, mailType="instantly",
sendEmail=TRUE, returnJson=FALSE, key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
# json <- as.character(toJSON(body))
url <- ""
if(mailType == "instantly") {
url <- Config.Email.Instantly.fullURL
} else if(mailType == "daily") {
url <- Config.Email.Daily.fullURL
} else if(mailType == "monthly") {
url <- Config.Email.Monthly.fullURL
}
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.FindOverlapProblemJSON <- function(dataType, problemType, startDateTime, endDateTime) {
res <- list(name = unbox(problemType),
stations = Problems.GetProblemStationCodeListOverlapInterval(
dataType, problemType ,datetime$start, datetime$end)
)
return(res)
}
Email.SendDailyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastOperationDay(currentTime)
print(datetime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv)
rain <- list(rain_or, rain_mg, rain_fv)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Daily.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendMonthlyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastMonth(currentTime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv, water_ol, water_hm, water_mp)
rain <- list(rain_or, rain_mg, rain_fv, rain_mp)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Monthly.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendEmail <- function(body, url, sendEmail = TRUE, returnJson = FALSE) {
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(toJSON(body))
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.SendDailyReport()
library("httr")
library("jsonlite")
library("lubridate")
source('config.R')
source('helper.R')
Email.sendMailNotification <- function(dataType, problemType, dateTime, problemStation, mailType="instantly",
sendEmail=TRUE, returnJson=FALSE, key=Config.Email.APIKey) {
cat("Email: Generating Email\n")
str(problemStation)
if (length(problemStation) <= 0) {
cat("Email: No new station, abort sending.\n")
return(NA)
}
rain <- list()
water <- list()
problemName <- Helper.FullProblemNameFromAbbr(problemType)
if(dataType == "RAIN") {
rain <- list(list(name = unbox(problemName),
stations = problemStation))
} else if (dataType == "WATER") {
water <- list(list(name = unbox(problemName),
stations = problemStation))
}
body <- list(key = unbox(key),
num = unbox(length(problemStation)),
date = unbox(Helper.POSIXctToString(dateTime)),
rain = rain,
water = water)
# json <- as.character(toJSON(body))
url <- ""
if(mailType == "instantly") {
url <- Config.Email.Instantly.fullURL
} else if(mailType == "daily") {
url <- Config.Email.Daily.fullURL
} else if(mailType == "monthly") {
url <- Config.Email.Monthly.fullURL
}
emailResult <- NA
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(json)
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.FindOverlapProblemJSON <- function(dataType, problemType, startDateTime, endDateTime) {
res <- list(name = unbox(problemType),
stations = Problems.GetProblemStationCodeListOverlapInterval(
dataType, problemType ,datetime$start, datetime$end)
)
return(res)
}
Email.SendDailyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastOperationDay(currentTime)
print(datetime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv)
rain <- list(rain_or, rain_mg, rain_fv)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Daily.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendMonthlyReport <- function(currentTime  = Sys.time(),
sendEmail  = TRUE,
returnJson = FALSE,
key        = Config.Email.APIKey) {
# start, end time
datetime <- Helper.LastMonth(currentTime)
water_or <- Email.FindOverlapProblemJSON("WATER", "OR" ,datetime$start, datetime$end)
water_mg <- Email.FindOverlapProblemJSON("WATER", "MG" ,datetime$start, datetime$end)
water_fv <- Email.FindOverlapProblemJSON("WATER", "FV" ,datetime$start, datetime$end)
water_ol <- Email.FindOverlapProblemJSON("WATER", "OL" ,datetime$start, datetime$end)
water_hm <- Email.FindOverlapProblemJSON("WATER", "HM" ,datetime$start, datetime$end)
water_mp <- Email.FindOverlapProblemJSON("WATER", "MP" ,datetime$start, datetime$end)
rain_or <- Email.FindOverlapProblemJSON("RAIN", "OR" ,datetime$start, datetime$end)
rain_mg <- Email.FindOverlapProblemJSON("RAIN", "MG" ,datetime$start, datetime$end)
rain_fv <- Email.FindOverlapProblemJSON("RAIN", "FV" ,datetime$start, datetime$end)
rain_mp <- Email.FindOverlapProblemJSON("RAIN", "MP" ,datetime$start, datetime$end)
water <- list(water_or, water_mg, water_fv, water_ol, water_hm, water_mp)
rain <- list(rain_or, rain_mg, rain_fv, rain_mp)
num <- sum(sapply(water, function(x){length(x$stations)})) + sum(sapply(rain, function(x){length(x$stations)}))
body <- list(key = unbox(key),
num = unbox(num),
date = unbox(Helper.POSIXctToString(currentTime)),
startdate = unbox(Helper.POSIXctToString(datetime$start)),
enddate = unbox(Helper.POSIXctToString(datetime$end)),
rain = rain,
water = water)
emailResult <- NA
url <- Config.Email.Monthly.fullURL
return(Email.SendEmail(body, url, sendEmail, returnJson))
}
Email.SendEmail <- function(body, url, sendEmail = TRUE, returnJson = FALSE) {
if(Config.Email.useEmailNotification & sendEmail){
cat("Sending email...\n")
emailResult <- POST(url, body = body, encode = "json")
}
if(returnJson) {
return(toJSON(body))
}
cat("Email: ", as.character(toJSON(body)) , "\n")
return(emailResult)
}
Email.SendDailyReport()
library("httr")
library("jsonlite")
library("lubridate")
source('config.R')
source('helper.R')
source('problems.R')
