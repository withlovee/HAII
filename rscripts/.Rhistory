cat("DONE!...\n")
flush.console()
}
cat("=================\n")
cat("Sending Emails...\n")
cat("=================\n")
flush.console()
newProblemStation <- getNewProblemStationList(dataType, problemType, currentTime, allBdProblem)
sendProblemMailNotification(dataType, problemType, currentTime, newProblemStation)
source('datalog.R')
source('boundary.R')
source('email.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
allBdProblem <- NA
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestProblemCheckedTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, startDateTime = as.POSIXct("2012-02-20"), endDateTime = as.POSIXct("2012-02-28"), debug=TRUE)
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.na(allBdProblem)) {
allBdProblem <- bdProblem
} else {
allBdProblem <- rbind(allBdProblem, bdProblem)
}
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateProblemLog(bdProblem, 60*10)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestProblemCheckedTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
cat("=================\n")
cat("Sending Emails...\n")
cat("=================\n")
flush.console()
newProblemStation <- getNewProblemStationList(dataType, problemType, currentTime, allBdProblem)
sendProblemMailNotification(dataType, problemType, currentTime, newProblemStation)
source('datalog.R')
source('boundary.R')
source('email.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
allBdProblem <- NA
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestProblemCheckedTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, startDateTime = as.POSIXct("2012-02-20"), endDateTime = as.POSIXct("2012-02-28"), debug=TRUE)
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.na(allBdProblem)) {
allBdProblem <- bdProblem
} else {
allBdProblem <- rbind(allBdProblem, bdProblem)
}
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateProblemLog(bdProblem, 60*10)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestProblemCheckedTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
cat("=================\n")
cat("Sending Emails...\n")
cat("=================\n")
flush.console()
newProblemStation <- getNewProblemStationList(dataType, problemType, currentTime, allBdProblem)
sendProblemMailNotification(dataType, problemType, currentTime, newProblemStation)
p
c(1,2,3) == c(1,2,3)
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
?checkTrue
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
c(1,2,3) == c(1,2,4)
if(c(1,2,3) == c(1,2,4)){
cat("x")
}
?all
p
code <- c("CHI001", "CHI002", "KRN001", "KRN002", "KRN003", "KRN004")
date <- c("2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08")
time <- c("17:00:00", "17:10:00", "17:20:00", "00:00:00", "00:10:00", "00:20:00")
water1       <- c(999999, 0, 12.2, 136.06, 185.25, -15.432)
left_bank    <- c(175.937, 12.778, 175.937, 9.83, 165.7, 15.937)
right_bank   <- c(152.212, 15.14, 152.212, 15.412, 175.937, 25.23)
ground_level <- c(128.037, -2.341, 143.435, -2.2, 128.037, -13.512)
data.frame(
code=code,
date=date,
time=time,
water1=water1,
left_bank=left_bank,
right_bank=right_bank,
ground_level=ground_level,
stringsAsFactors=FALSE
)
p
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
p
data
getDataBD <- function() {
# Condition: Passed if max_bank + 4 and ground_level - 1
# CHI001: Passed (Above right_bank but below left_bank)
# CHI002: Passed (Below both banks)
# KRN001: Below ground level
# KRN002: Above maxbank (left)
# KRN003: Above maxbank (right)
# KRN004: Below negative ground level
# code       date     time     water1 left_bank right_bank ground_level
# 1 CHI001 2012-06-08 17:00:00 999999.000   175.937    152.212      128.037
# 2 CHI002 2012-06-08 17:10:00      0.000    12.778     15.140       -2.341
# 3 KRN001 2012-06-08 17:20:00     12.200   175.937    152.212      143.435
# 4 KRN002 2012-06-08 00:00:00    136.060     9.830     15.412       -2.200
# 5 KRN003 2012-06-08 00:10:00    185.250   165.700    175.937      128.037
# 6 KRN004 2012-06-08 00:20:00    -15.432    15.937     25.230      -13.512
code <- c("CHI001", "CHI002", "KRN001", "KRN002", "KRN003", "KRN004")
date <- c("2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08", "2012-06-08")
time <- c("17:00:00", "17:10:00", "17:20:00", "00:00:00", "00:10:00", "00:20:00")
water1       <- c(999999, 0, 12.2, 136.06, 185.25, -15.432)
left_bank    <- c(175.937, 12.778, 175.937, 9.83, 165.7, 15.937)
right_bank   <- c(152.212, 15.14, 152.212, 15.412, 175.937, 25.23)
ground_level <- c(128.037, -2.341, 143.435, -2.2, 128.037, -13.512)
data.frame(
code=code,
date=date,
time=time,
water1=water1,
left_bank=left_bank,
right_bank=right_bank,
ground_level=ground_level,
stringsAsFactors=FALSE
)
}
data <- getDataBD()
results <- searchBoundaryProblem("WATER", data)
results
results$station_code
results$station_code[1]
results$station_code[1]
checkEquals("KRN002", results$station_code[1])
checkEquals("KRN002", as.character(results$station_code[1]))
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
results
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
data <-  data.frame(
code="CHI001",
date="2014-01-01",
time="00:00:00",
water1=10,
left_bank=100,
right_bank=100,
ground_level=0,
stringsAsFactors=FALSE
)
results <- searchBoundaryProblem(data)
data
nrow(data)
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
?isntall.packages
?isntall.package
?install.package
?install.packages
source('datalog.R')
source('boundary.R')
source('email.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
allBdProblem <- NA
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestProblemCheckedTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, startDateTime = as.POSIXct("2012-02-20"), endDateTime = as.POSIXct("2012-02-28"), debug=TRUE)
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(dataType, data)
str(bdProblem)
if(is.na(allBdProblem)) {
allBdProblem <- bdProblem
} else {
allBdProblem <- rbind(allBdProblem, bdProblem)
}
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateProblemLog(bdProblem, 60*10)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestProblemCheckedTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
?apply
mapply
?mapply
?install.packages
problem
problem$station_id
names(problem)
problem$station_code
levels(problem$station_code)
levels(c())
allBdProblem
allBdProblem[1:10,]
allBdProblem
a <- allBdProblem[1,]
a
rbind(a,a)
source('datalog.R')
source('boundary.R')
source('email.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
allBdProblem <- NA
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestProblemCheckedTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
data <- get24HrWaterLevelData(station, startDateTime, currentTime)
# data <- get24HrWaterLevelData(station, startDateTime = as.POSIXct("2012-02-20"), endDateTime = as.POSIXct("2012-02-28"), debug=TRUE)
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(dataType, data)
str(bdProblem)
if(is.na(allBdProblem)) {
allBdProblem <- bdProblem
} else {
allBdProblem <- rbind(allBdProblem, bdProblem)
}
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateProblemLog(bdProblem, 60*10)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestProblemCheckedTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
cat("=================\n")
cat("Sending Emails...\n")
cat("=================\n")
flush.console()
newProblemStation <- getNewProblemStationList(dataType, problemType, currentTime, allBdProblem)
sendProblemMailNotification(dataType, problemType, currentTime, newProblemStation)
allBdProblem
source('datalog.R')
source('boundary.R')
source('email.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
allBdProblem <- NA
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestProblemCheckedTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
data <- get24HrWaterLevelData(station, startDateTime, currentTime)
# data <- get24HrWaterLevelData(station, startDateTime = as.POSIXct("2012-02-20"), endDateTime = as.POSIXct("2012-02-28"), debug=TRUE)
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(dataType, data)
str(bdProblem)
if(is.data.frame(bdProblem)) {
if(is.na(allBdProblem)) {
allBdProblem <- bdProblem
} else {
allBdProblem <- rbind(allBdProblem, bdProblem)
}
cat("Writing Logs...\n")
flush.console()
updateProblemLog(bdProblem, 60*10)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestProblemCheckedTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
if(!is.na(allBdProblem)) {
cat("====================\n")
cat("Sending Emails...\n")
cat("====================\n")
flush.console()
newProblemStation <- getNewProblemStationList(dataType, problemType, currentTime, allBdProblem)
sendProblemMailNotification(dataType, problemType, currentTime, newProblemStation)
} else {
cat("====================\n")
cat("No problem found...\n")
cat("====================\n")
flush.console()
}
library(RUnit);
source('boundary.R')
test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^boundary\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
