source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
cat("Writing Logs...\n")
flush.console()
if(!is.na(bdProblem)) {
# updateBoundaryProblem(bdProblem)
cat("Update latest runtime...\n")
flush.console()
# latestTime <- max(as.POSIXct(problem$end_datetime))
# updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
}
cat("DONE!...\n")
flush.console()
}
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
cat("Writing Logs...\n")
flush.console()
if(!is.na(bdProblem)) {
# updateBoundaryProblem(bdProblem)
cat("Update latest runtime...\n")
flush.console()
# latestTime <- max(as.POSIXct(problem$end_datetime))
# updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
}
cat("DONE!...\n")
flush.console()
break
}
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(!is.na(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
# updateBoundaryProblem(bdProblem)
cat("Update latest runtime...\n")
flush.console()
# latestTime <- max(as.POSIXct(problem$end_datetime))
# updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
} else {
cat("Problem not found...")
}
cat("DONE!...\n")
flush.console()
break
}
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(!is.na(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
# updateBoundaryProblem(bdProblem)
cat("Update latest runtime...\n")
flush.console()
# latestTime <- max(as.POSIXct(problem$end_datetime))
# updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
} else {
cat("Problem not found...\n")
}
cat("DONE!...\n")
flush.console()
break
}
str(NA)
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(!is.na(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
latestTime <- max(as.POSIXct(data$end_datetime))
updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
cat("DONE!...\n")
flush.console()
}
data
data$end_datetime
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(!is.na(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
cat("DONE!...\n")
flush.console()
}
end_datetime <- mapply(paste, data$date, data$time)
end_datetime
data
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(!is.na(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
print(Sys.time())
print(strftime(Sys.time()))
cat(strftime(Sys.time()))
à¸¢
p
source('datalog.R')
source('boundary.R')
problemType <- "WATER_BD"
stationList <- getStationCodeList();
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
data <- get24HrWaterLevelData(station, startDateTime, currentTime)
# data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
source('datalog.R')
source('boundary.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
data <- get24HrWaterLevelData(station, startDateTime, currentTime)
# data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
source('datalog.R')
source('boundary.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
source('datalog.R')
source('boundary.R')
dataType <- "WATER"
problemType <- "BD"
stationList <- getStationCodeList();
cat("###########################################\n")
cat(" Date Executed: ")
cat(strftime(Sys.time()))
cat("\n")
cat("###########################################\n")
flush.console()
currentTime <- Sys.time()
data <- NA
for(station in stationList) {
cat("\n==========[ STATION:")
cat(station)
cat(" ]==========\n")
flush.console()
cat("Getting latest run time...\n")
flush.console()
startDateTime <- getLatestBoundaryProblemRunTime(station, dataType, problemType)
if(!is.na(startDateTime)) {
startDateTime <- startDateTime + 1
}
str(startDateTime)
cat("Loading 24hr data...\n")
flush.console()
# data <- get24HrWaterLevelData(station, startDateTime, currentTime)
data <- get24HrWaterLevelData(station, endDateTime = as.POSIXct("2012-02-28"))
str(data)
if(nrow(data) > 0) {
cat("Detecting BD Problem...\n")
flush.console()
bdProblem <- searchBoundaryProblem(data)
str(bdProblem)
if(is.data.frame(bdProblem)) {
cat("Writing Logs...\n")
flush.console()
updateBoundaryProblem(bdProblem)
} else {
cat("Problem not found...\n")
}
cat("Update latest runtime...\n")
flush.console()
end_datetime <- mapply(paste, data$date, data$time)
latestTime <- max(as.POSIXct(end_datetime))
updateLatestBoundaryProblemRunTime(station, dataType, problemType, latestTime)
} else {
cat("No data...\n")
}
cat("DONE!...\n")
flush.console()
}
install.packages('httr')
install.packages('httr')
