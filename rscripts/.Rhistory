length(c("S1","S2"))
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(name=problemName,
stations=as.list(problemStation))
} else if (dataType == "WATER") {
water <- list(name=problemName,
stations=as.list(problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=rain,
water=water)
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(name=problemName,
stations=problemStation)
} else if (dataType == "WATER") {
water <- list(name=problemName,
stations=problemStation)
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=rain,
water=water)
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(name=problemName,
stations=problemStation)
} else if (dataType == "WATER") {
water <- list(name=problemName,
stations=problemStation)
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=list(rain),
water=list(water))
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- unbox(list())
water <- unbox(list())
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- unbox(list(name=problemName,
stations=problemStation))
} else if (dataType == "WATER") {
water <- unbox(list(name=problemName,
stations=problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=list(rain),
water=list(water))
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- NA
water <- NA
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- unbox(list(name=problemName,
stations=problemStation))
} else if (dataType == "WATER") {
water <- unbox(list(name=problemName,
stations=problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=list(rain),
water=list(water))
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- NA
water <- NA
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(name=problemName,
stations=problemStation)
} else if (dataType == "WATER") {
water <- list(name=problemName,
stations=problemStation)
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=list(rain),
water=list(water))
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(list(name=problemName,
stations=problemStation))
} else if (dataType == "WATER") {
water <- list(list(name=problemName,
stations=problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=rain,
water=water
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(list(name=problemName,
stations=problemStation))
} else if (dataType == "WATER") {
water <- list(list(name=problemName,
stations=problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=rain,
water=water)
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("WATER", "BD", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library("httr")
library("jsonlite")
## global email config
BASE_URL <- "http://localhost:8888"
EMAIL_API_URL <- paste0(BASE_URL, "/api/email/send_alert/instantly")
USE_EMAIL_NOTIFICATION <- TRUE
EMAIL_KEY <- "HAIIEMAILKEY"
convertAbbrToFullProblemName <- function(abbr) {
fullName <- NA
if(abbr == "BD") {
fullName <- "Out of Range"
} else if(abbr == "FV") {
fullName <- "Flat Value"
} else if(abbr == "MV") {
fullName <- "Missing Value"
} else if(abbr == "OL") {
fullName <- "Outliers"
} else if(abbr == "IH") {
fullName <- "Inhomogenity"
} else if(abbr == "MP") {
fullName <- "Missing Pattern"
}
return(fullName)
}
sendProblemMailNotification <- function(dataType, problemType, dateTime, problemStation,
sendEmail=TRUE, returnJson=FALSE,key=EMAIL_KEY) {
rain <- list()
water <- list()
problemName <- convertAbbrToFullProblemName(problemType)
if(dataType == "RAIN") {
rain <- list(list(name=unbox(problemName),
stations=problemStation))
} else if (dataType == "WATER") {
water <- list(list(name=unbox(problemName),
stations=problemStation))
}
body <- list(key=unbox(key),
num=unbox(length(problemStation)),
date=unbox(strftime(dateTime, "%Y-%m-%d %H:%M:%S")),
rain=rain,
water=water)
json <- toJSON(body)
json <- as.character(json)
if(USE_EMAIL_NOTIFICATION & sendEmail){
POST(EMAIL_API_URL, body = json, encode = "json")
}
if(returnJson) {
return(json)
}
}
sendProblemMailNotification("WATER", "BD", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("WATER", "BD", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=TRUE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("WATER", "BD", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library(RUnit);
##### Testing boundary.R
source('boundary.R')
boundary.test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^test\\.boundary\\.\\d+\\.R')
boundary.test.result <- runTestSuite(boundary.test.suite)
printTextProtocol(boundary.test.result)
##### Testing email.R
source('email.R')
email.test.suite <- defineTestSuite("email",
dirs = file.path("tests"),
testFileRegexp = '^test\\.email\\.\\d+\\.R')
email.test.result <- runTestSuite(email.test.suite)
printTextProtocol(email.test.result)
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1","S2","S3"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library(RUnit);
##### Testing boundary.R
source('boundary.R')
boundary.test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^test\\.boundary\\.\\d+\\.R')
boundary.test.result <- runTestSuite(boundary.test.suite)
printTextProtocol(boundary.test.result)
##### Testing email.R
source('email.R')
email.test.suite <- defineTestSuite("email",
dirs = file.path("tests"),
testFileRegexp = '^test\\.email\\.\\d+\\.R')
email.test.result <- runTestSuite(email.test.suite)
printTextProtocol(email.test.result)
sendProblemMailNotification("RAIN", "MP", as.POSIXct("2012-01-01 00:00:00"), c("S1"), sendEmail=FALSE, returnJson=TRUE, key="TESTKEY")
library(RUnit);
##### Testing boundary.R
source('boundary.R')
boundary.test.suite <- defineTestSuite("boundary",
dirs = file.path("tests"),
testFileRegexp = '^test\\.boundary\\.\\d+\\.R')
boundary.test.result <- runTestSuite(boundary.test.suite)
printTextProtocol(boundary.test.result)
##### Testing email.R
source('email.R')
email.test.suite <- defineTestSuite("email",
dirs = file.path("tests"),
testFileRegexp = '^test\\.email\\.\\d+\\.R')
email.test.result <- runTestSuite(email.test.suite)
printTextProtocol(email.test.result)
